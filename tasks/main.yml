---
# tasks file for playbooks/roles/kvm-vm
- name: Check if operating system disk already exists
  stat:
    path: /var/lib/libvirt/images/{{ kvm_vm_os_disk_name }}.qcow2
    get_checksum: no
    get_md5: no
    get_mime: no
    get_attributes: no
  register: os_disk_file

- name: fail if operating system disk already exists
  fail:
    msg: "An operating system disk already exists at /var/lib/libvirt/images/{{ kvm_vm_os_disk_name }}.qcow2"
  when: os_disk_file.stat.exists

- name: Check if the base image already exists
  stat:
    path: /var/lib/libvirt/images/{{ kvm_vm_base_img }}
    get_checksum: no
    get_md5: no
    get_mime: no
    get_attributes: no
  register: base_img_file

- name: download base image if needed
  command: >
    curl -skfL -C- -o {{ kvm_vm_base_img }} {{ kvm_base_img_url }}
  args:
    chdir: /var/lib/libvirt/images/
  register: curl_result
  until: curl_result.rc not in [18, 56]
  retries: 20
  delay: 5
  when: base_img_file.stat.exists == False

- name: Create operating system disk for vm
  command: "qemu-img create -f qcow2 /var/lib/libvirt/images/{{ kvm_vm_os_disk_name }}.qcow2 {{ kvm_vm_os_disk_size }}"
  register: os_disk_results
  changed_when: '"Formatting" in os_disk_results.stdout'

- name: Push base image onto vm operating system disk
  command: >
    virt-resize --expand /dev/sda1 /var/lib/libvirt/images/{{ kvm_vm_base_img }}
    /var/lib/libvirt/images/{{ kvm_vm_os_disk_name }}.qcow2
  register: resize_os_disk_results
  changed_when: '"Resize operation completed with no errors" in resize_os_disk_results.stdout'

- name: Grow root file system to size of disk
  command: "virt-customize -a /var/lib/libvirt/images/{{ kvm_vm_os_disk_name }}.qcow2 --run-command 'xfs_growfs /'"
  register: grow_os_disk_results
  changed_when: '"Finishing off" in grow_os_disk_results.stdout'

- name: Set the root password for the vm and uninstall cloud-init
  command: > 
    virt-customize -a /var/lib/libvirt/images/{{ kvm_vm_os_disk_name }}.qcow2
    --root-password password:{{ kvm_vm_root_pwd }} --uninstall cloud-init
  register: mod_os_disk_results
  changed_when: '"Finishing off" in mod_os_disk_results.stdout'

- name: create temp directory
  tempfile:
    state: directory
    suffix: network
  register: temp_dir

- name: Create the ifcfg files for vm
  template:
    src: ifcfg.j2
    dest: "{{ temp_dir.path }}/{{ kvm_vm_hostname }}-ifcfg-{{ item.name }}"
  delegate_to: localhost
  loop: "{{ kvm_vm_nics }}"

- name: Ensure individual dirs exist for vm ifcfg files
  file:
    path: "/tmp/{{ kvm_vm_hostname }}"
    state: directory

- name: Copy over the ifcfg files for the vm
  copy:
    src: "{{ temp_dir.path }}/{{ kvm_vm_hostname }}-ifcfg-{{ item.name }}"
    dest: "/tmp/{{ kvm_vm_hostname }}/ifcfg-{{ item.name }}"
  loop: "{{ kvm_vm_nics }}"

- name: Copy ifcfg files into vm operating disk
  command: >
    virt-copy-in -a /var/lib/libvirt/images/{{ kvm_vm_hostname }}.qcow2
    /tmp/{{ kvm_vm_hostname }}/ifcfg-{{ item.name }} /etc/sysconfig/network-scripts/
  loop: "{{ kvm_vm_nics }}"
  changed_when: false

- name: Create xml for vm
  command: >
    virt-install --ram {{ kvm_vm_ram }} --vcpus {{ kvm_vm_vcpus }} --os-variant rhel7
    --disk path=/var/lib/libvirt/images/{{ kvm_vm_hostname }}.qcow2,device=disk,bus=virtio
    --network none --noautoconsole --vnc --name {{ kvm_vm_hostname }} --cpu host-model --autostart --dry-run --print-xml
  register: vm_xml_content
  changed_when: false

- name: Define vm
  become: yes
  virt:
    name: "{{ kvm_vm_hostname }}"
    command: define
    xml: "{{ vm_xml_content.stdout }}"
    uri: qemu:///system

- name: Start up vm
  command: "virsh start {{ kvm_vm_hostname }}"
  register: virsh_start_results
  changed_when: '"started" in virsh_start_results.stdout'

- name: Attach network interfaces for vm
  command: "virsh attach-interface {{ kvm_vm_hostname }} {{ item.config }} --live --persistent"
  loop: "{{ kvm_vm_nics }}"
  changed_when: false
